import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  value: '',
  status: 'idle',
  posts: [],
  link: '',
  comments: [],
  fullname: '',
  title: [],
  replies: [],
  searchLink: '',
  searches: [],
  searchPage: '',
  blank: '',
  
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await axios.get(`https://www.reddit.com/r/popular.json`)
    // The value we return becomes the `fulfilled` action payload
    return response.data.data.children;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    searchF: (state, action) => {
      state.searches = action.payload;
    },
    valueSetter: (state, action) => {
      state.value = action.payload
    },
    searchNav: (state, action) => {
      state.searchPage = action.payload
    },
    postAdder: (state, action) => {
     state.posts = action.payload;
    
     //state.posts.map((item)=>console.log(item.data.preview.images[0].source.url))
    },
    subber: (state, action) => {
      state.blank = action.payload
    },
    searchAdder: (state, action) => {
      state.searchLink = action.payload
    },

    nameAdder: (state, action) => {
      state.fullname = action.payload;
    },
    linkAdder: (state, action) => {
      state.link += action.payload;
    },
    commentAdder: (state, action) => {
      state.comments = action.payload[1].data.children;
     state.title = action.payload[0].data.children;
      },
    resetter: (state) => {
      state.link = '';
    },
    homepage: (state) => {
      state.value = ''
      state.searchPage = ''
    }

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
        state.posts.push(action.payload)
      });
  },
});

export const { resetter, valueSetter, homepage, subber, searchNav, searchF, searchAdder, nameAdder, linkAdder, commentAdder,postAdder } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default counterSlice.reducer;
